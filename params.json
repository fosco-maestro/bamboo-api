{"name":"Bamboo API","tagline":"Node.js module wrapping the Atlassian Bamboo REST API","body":"[![Build Status](https://travis-ci.org/sebarmeli/bamboo-api.png)](https://travis-ci.org/sebarmeli/bamboo-api)\r\n\r\nNode.js module wrapping the [Atlassian Bamboo REST API](https://developer.atlassian.com/display/BAMBOODEV/Bamboo+REST+APIs).\r\nThis module gets some useful information from your [Atlassian Bamboo](http://www.atlassian.com/software/bamboo/overview) CI,\r\nsuch as latest successful build number for a plan or JIRA issues associated to a specific build.\r\n\r\nIt can be used as command-line interface or can be included in your Node app.\r\n\r\n# Installation\r\n    \r\nAfter getting Node.js and npm:\r\n\r\n```\r\n$ npm install -g bamboo-api\r\n```\r\n\r\n# Usage\r\n\r\n## In Node app\r\n\r\nYou can require the module from your Node app.\r\n\r\n```javascript\r\nvar Bamboo = require('bamboo-api');\r\n```\r\n\r\nAfter that, you can instantiate the Bamboo function:\r\n\r\n```javascript\r\nvar bamboo = new Bamboo(\"http://www.host:8085\");\r\n```\r\n\r\nand then you can use the available methods, e.g.:\r\n\r\n```javascript\r\nbamboo.getLatestBuildStatus(\"PROJECT_KEY-PLAN_KEY\", function(error, result) {\r\n    // do something here\r\n});\r\n```\r\n\r\nAlso you can use basic http **authentication** that specified in [RFC 1738](http://www.ietf.org/rfc/rfc1738.txt) by passing\r\n`username` and `password` to `Bamboo` constructor as second and third parameter.\r\n\r\nFor example:\r\n\r\n```javascript\r\nvar bamboo = new Bamboo(\"http://www.host:8085\", \"username\", \"password\");\r\n\r\nbamboo.getLatestBuildStatus(\"PROJECT_KEY-PLAN_KEY\", function(error, result) {\r\n    // do something here\r\n});\r\n```\r\n\r\n### Available methods\r\n\r\n#### bamboo.getLatestSuccessfulBuildNumber(planKey, params, callback)\r\n\r\nGet the latest successful build number.\r\n\r\n```javascript\r\nbamboo.getLatestSuccessfulBuildNumber(\"PROJECT_KEY-PLAN_KEY\", false, function(error, result) {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n\r\n    console.log(\"Latest successful build number:\", result);\r\n});\r\n```\r\n\r\n#### bamboo.getLatestBuildStatus(planKey, callback)\r\n\r\nGet latest build status: state and number.\r\n\r\n```javascript\r\nbamboo.getLatestSuccessfulBuildNumber(\"PROJECT_KEY-PLAN_KEY\", function(error, state, number) {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n\r\n    console.log(\"Latest build state:\", state);\r\n    console.log(\"Latest build number:\", number);\r\n});\r\n```\r\n\r\n#### bamboo.getBuildStatus(buildDetails, callback)\r\n\r\nGet status of the build.\r\n\r\n```javascript\r\nbamboo.getBuildStatus(\"PROJECT_KEY-PLAN_KEY/BUILD_NUMBER\", function(error, result) {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n\r\n    console.log(\"Status of the build:\", result);\r\n});\r\n```\r\n\r\n#### bamboo.getChangesFromBuild(buildDetails, callback)\r\n\r\nGet changes associated to a specific build. It also considers a dependent plan recursively.\r\n\r\n```javascript\r\nbamboo.getChangesFromBuild(\"PROJECT_KEY-PLAN_KEY/BUILD_NUMBER\", function(error, result) {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n\r\n    console.log(\"List of changes:\", result);\r\n});\r\n```\r\n\r\n#### bamboo.getJiraIssuesFromBuild(buildDetails, callback)\r\n\r\nGet jira issues associated to a specific build. It also considers a dependent plan.\r\n\r\n```javascript\r\nbamboo.getJiraIssuesFromBuild(\"PROJECT_KEY-PLAN_KEY/BUILD_NUMBER\", function(error, result) {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n\r\n    console.log(\"List of JIRA tasks:\", result);\r\n});\r\n```\r\n\r\n#### bamboo.getArtifactContent(buildDetails, artifactName, callback)\r\n\r\nGet content of an artifact associated to a build.\r\n\r\n```javascript\r\nbamboo.getArtifactContent(\"PROJECT_KEY-PLAN_KEY/BUILD_NUMBER\", \"artifact\", function(error, result) {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n\r\n    console.log(\"Content of an artifact:\", result);\r\n});\r\n```\r\n\r\n#### bamboo.getAllPlans(params, callback, currentPlans)\r\n\r\nGet list of plans, key and names available.\r\n\r\n```javascript\r\nbamboo.getArtifactContent(\"?start-index=25\", function(error, result) {\r\n    if (error) {\r\n        console.log(error);\r\n        return;\r\n    }\r\n\r\n    console.log(\"Plans:\", result);\r\n});\r\n```\r\n\r\n## Command line\r\n\r\nThe module can be used from command-line and there are few commands available.\r\n\r\nBefore use you need to define the Bamboo URL in BAMBOO_URL environment variable (default: `http://localhost:8085`):\r\n\r\n- *nix: ```export BAMBOO_URL=http://host:port```\r\n- Windows: ```set BAMBOO_URL=http://host:port```\r\n\r\nAfter variable is defined, you can use bamboo-api command line, otherwise on execution you should get following error:\r\n\r\n```\r\n$ bamboo-api build_no \"PROJECT_KEY-PLAN_KEY\"\r\n\r\n> ERROR: Before use of Bamboo API command line, specified global variable BAMBOO_URL in your environment!\r\n\r\n    For *nix users:\r\n\r\n      export BAMBOO_URL=\"BAMBOO_URL_HERE\"\r\n\r\n    For Windows users:\r\n\r\n      set BAMBOO_URL=\"BAMBOO_URL_HERE\"\r\n\r\n  For more information use --help or read README file.\r\n> Error: connect ECONNREFUSED\r\n```\r\n\r\n### Available commands\r\n\r\nFor command line help use option `--help`:\r\n\r\n```\r\n$ bamboo-api --help\r\n\r\n  Usage: bamboo-api [command] <params...>\r\n\r\n  Commands:\r\n\r\n    build_no <PROJECT_KEY-PLAN_KEY>\r\n    get the latest successful build number\r\n\r\n    status <PROJECT_KEY-PLAN_KEY>\r\n    get status and build number of the latest build\r\n\r\n    build_status <PROJECT_KEY-PLAN_KEY/BUILD_NUMBER>\r\n    get the status of the build\r\n\r\n    changes <PROJECT_KEY-PLAN_KEY/BUILD_NUMBER>\r\n    gets all the changes associated to a specific build - considering dependent plan too\r\n\r\n    jira_issues <PROJECT_KEY-PLAN_KEY/BUILD_NUMBER>\r\n    gets all the JIRA issues associated to a specific build - considering dependent plan too\r\n\r\n    artifact <PROJECT_KEY-PLAN_KEY/BUILD_NUMBER> <ARTIFACT_NAME>\r\n    gets the content of an artifact associated to a build\r\n\r\n    plans\r\n    gets the list of all plans available\r\n\r\n  Options:\r\n\r\n    -h, --help     output usage information\r\n    -V, --version  output the version number\r\n\r\n  Environment variables:\r\n\r\n    BAMBOO_URL          Bamboo's UR (default: 'http://localhost:8085').\r\n                        Note: you can use base authentication using url,\r\n                        Simply pass the 'user:password' before the host\r\n                        with an '@' sign.\r\n\r\n                        For example: http://user:password@example.com\r\n\r\n  Examples:\r\n\r\n    $ bamboo-api build_status \"PROJECT_KEY-PLAN_KEY/BUILD_NUMBER\"\r\n    > InProgress\r\n\r\n$ bamboo-api build_no --help\r\n\r\n  Usage: build_no <PROJECT_KEY-PLAN_KEY>\r\n\r\n  Options:\r\n\r\n    -h, --help  output usage information\r\n\r\n```\r\n\r\n#### bamboo-api build_no\r\n\r\nGet the build number of the latest successful build number:\r\n\r\n```\r\n$ bamboo-api build_no <PROJECT_KEY-PLAN_KEY>\r\n```\r\n\r\nWill output `result` or `error`.\r\n\r\n#### bamboo-api status\r\n\r\nGet status and build number of the latest build:\r\n\r\n```\r\n$ bamboo-api status <PROJECT_KEY-PLAN_KEY>\r\n```\r\n\r\nWill output `state` and `number` otherwise `error`.\r\n\r\n#### bamboo-api build_status\r\n\r\nGet the status of the build:\r\n\r\n```\r\n$ bamboo-api build_no <PROJECT_KEY-PLAN_KEY/BUILD_NUMBER>\r\n```\r\n\r\nWill output `result` or `error`.\r\n\r\n#### bamboo-api changes\r\n\r\nGet all the changes associated to a specific build - considering dependent plan:\r\n\r\n```\r\n$ bamboo-api changes <PROJECT_KEY-PLAN_KEY/BUILD_NUMBER>\r\n```\r\n\r\nWill output `result` or `error`.\r\n\r\n#### bamboo-api jira_issue\r\n\r\nGet the list of JIRA issues associated to a specific build - considering dependent plan:\r\n\r\n```\r\n$ bamboo-api jira_issue <PROJECT_KEY-PLAN_KEY/BUILD_NUMBER>\r\n```\r\n\r\nIf you work with build pipelines, you know that builds are triggered by other builds. So you might need to find out the\r\nJIRA issues associated to the commits done on the build triggering the considered 'plan'.\r\n\r\nNote: For the JIRA integration to work, you need to define the JIRA task in the message of your Git commit.\r\n\r\nWill output `result` or `error`.\r\n\r\n#### bamboo-api artifact\r\n\r\nGet the content of an artifact associated to a specific build:\r\n\r\n```\r\n$ bamboo-api artifact <PROJECT_KEY-PLAN_KEY/BUILD_NUMBER> <ARTIFACT_NAME>\r\n```\r\n\r\nWill output `result` or `error`.\r\n\r\n#### bamboo-api plans\r\n\r\nGet the list of all the plans available:\r\n\r\n```\r\n$ bamboo-api plans\r\n```\r\n\r\nWill output `result` or `error`.\r\n\r\n# Development\r\n\r\nThis module contains only a limited set of information available with the Bamboo API. Feel free to extend it. Test cases\r\nare located in the 'test' folder and you run them either through:\r\n\r\n```\r\n$ npm test\r\n```\r\n\r\nor if you have globally installed `mocha`, just use it:\r\n\r\n```\r\n$ mocha\r\n```\r\n\r\n# Copyright\r\n\r\nCopyright (C) 2012 Sebastiano Armeli-Battana and other [contributors](https://github.com/sebarmeli/bamboo-api/graphs/contributors).\r\n\r\nDistributed under the MIT License.","google":"UA-53453688-2","note":"Don't delete this file! It's used internally to help with page regeneration."}